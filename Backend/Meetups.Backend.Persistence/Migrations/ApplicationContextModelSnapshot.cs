// <auto-generated />
using System;
using Meetups.Backend.Persistence.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Meetups.Backend.Persistence.Migrations
{
    [DbContext(typeof(ApplicationContext))]
    partial class ApplicationContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Meetups.Backend.Entities.Meetup.City", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("pk_cities");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasDatabaseName("ux_cities_name");

                    b.ToTable("cities", (string)null);
                });

            modelBuilder.Entity("Meetups.Backend.Entities.Meetup.Meetup", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<int>("Duration")
                        .HasColumnType("integer")
                        .HasColumnName("duration");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("start_time");

                    b.Property<string>("Topic")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("topic");

                    b.Property<Guid>("organizer_id")
                        .HasColumnType("uuid");

                    b.HasKey("Id")
                        .HasName("pk_meetups");

                    b.HasIndex("Topic")
                        .IsUnique()
                        .HasDatabaseName("ux_meetups_topic");

                    b.HasIndex("organizer_id")
                        .HasDatabaseName("ix_meetups_organizer_id");

                    b.ToTable("meetups", (string)null);
                });

            modelBuilder.Entity("Meetups.Backend.Entities.User.RefreshToken", b =>
                {
                    b.Property<Guid>("TokenId")
                        .HasColumnType("uuid")
                        .HasColumnName("token_id");

                    b.Property<Guid>("BearerId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.HasKey("TokenId")
                        .HasName("pk_refresh_tokens");

                    b.HasIndex("BearerId")
                        .HasDatabaseName("ix_refresh_tokens_user_id");

                    b.ToTable("refresh_tokens", (string)null);
                });

            modelBuilder.Entity("Meetups.Backend.Entities.User.User", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("DisplayName")
                        .IsRequired()
                        .HasMaxLength(45)
                        .HasColumnType("character varying(45)")
                        .HasColumnName("display_name");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("password");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)")
                        .HasColumnName("username");

                    b.Property<string>("role")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id")
                        .HasName("pk_users");

                    b.HasIndex("Username")
                        .IsUnique()
                        .HasDatabaseName("ux_users_username");

                    b.ToTable("users", (string)null);

                    b.HasDiscriminator<string>("role").HasValue("Guest");
                });

            modelBuilder.Entity("System.Collections.Generic.Dictionary<string, string>", b =>
                {
                    b.Property<Guid>("meetup_id")
                        .HasColumnType("uuid");

                    b.Property<Guid>("signed_up_guest_id")
                        .HasColumnType("uuid");

                    b.HasKey("meetup_id", "signed_up_guest_id")
                        .HasName("pk_meetups_guests_signup");

                    b.HasIndex("signed_up_guest_id")
                        .HasDatabaseName("ix_meetups_guests_signup_signed_up_guest_id");

                    b.ToTable("meetups_guests_signup", (string)null);
                });

            modelBuilder.Entity("Meetups.Backend.Entities.User.Guest", b =>
                {
                    b.HasBaseType("Meetups.Backend.Entities.User.User");

                    b.HasDiscriminator().HasValue("Guest");
                });

            modelBuilder.Entity("Meetups.Backend.Entities.User.Organizer", b =>
                {
                    b.HasBaseType("Meetups.Backend.Entities.User.User");

                    b.HasDiscriminator().HasValue("Organizer");
                });

            modelBuilder.Entity("Meetups.Backend.Entities.Meetup.Meetup", b =>
                {
                    b.HasOne("Meetups.Backend.Entities.User.Organizer", "Organizer")
                        .WithMany("OrganizedMeetups")
                        .HasForeignKey("organizer_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_meetups_organizers_organizer_id");

                    b.OwnsOne("Meetups.Backend.Entities.Meetup.Meetup.Place#Meetups.Backend.Entities.Meetup.MeetupPlace", "Place", b1 =>
                        {
                            b1.Property<Guid>("MeetupId")
                                .HasColumnType("uuid");

                            b1.Property<string>("Address")
                                .IsRequired()
                                .HasMaxLength(75)
                                .HasColumnType("character varying(75)")
                                .HasColumnName("place_address");

                            b1.Property<Guid>("city_id")
                                .HasColumnType("uuid")
                                .HasColumnName("place_city_id");

                            b1.HasKey("MeetupId");

                            b1.HasIndex("city_id")
                                .HasDatabaseName("ix_meetups_place_city_id");

                            b1.ToTable("meetups", (string)null);

                            b1.WithOwner()
                                .HasForeignKey("MeetupId");

                            b1.HasOne("Meetups.Backend.Entities.Meetup.City", "City")
                                .WithMany()
                                .HasForeignKey("city_id")
                                .OnDelete(DeleteBehavior.Cascade)
                                .IsRequired()
                                .HasConstraintName("fk_meetups_cities_place_city_id");

                            b1.Navigation("City");
                        });

                    b.Navigation("Organizer");

                    b.Navigation("Place")
                        .IsRequired();
                });

            modelBuilder.Entity("Meetups.Backend.Entities.User.RefreshToken", b =>
                {
                    b.HasOne("Meetups.Backend.Entities.User.User", null)
                        .WithMany("RefreshTokens")
                        .HasForeignKey("BearerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_users_refresh_tokens_user_id");
                });

            modelBuilder.Entity("System.Collections.Generic.Dictionary<string, string>", b =>
                {
                    b.HasOne("Meetups.Backend.Entities.Meetup.Meetup", null)
                        .WithMany()
                        .HasForeignKey("meetup_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_meetups_guests_signup_meetups_meetup_id");

                    b.HasOne("Meetups.Backend.Entities.User.Guest", null)
                        .WithMany()
                        .HasForeignKey("signed_up_guest_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_meetups_guests_signup_guests_signed_up_guest_id");
                });

            modelBuilder.Entity("Meetups.Backend.Entities.User.User", b =>
                {
                    b.Navigation("RefreshTokens");
                });

            modelBuilder.Entity("Meetups.Backend.Entities.User.Organizer", b =>
                {
                    b.Navigation("OrganizedMeetups");
                });
#pragma warning restore 612, 618
        }
    }
}
